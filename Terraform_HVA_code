# Terraform-based High Availability Architecture for 99.99% Uptime (AWS)

# Providers
provider "aws" {
  region = "us-east-1"
}

# VPC
module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  name    = "ha-vpc"
  cidr    = "10.0.0.0/16"

  azs             = ["us-east-1a", "us-east-1b"]
  private_subnets = ["10.0.1.0/24", "10.0.2.0/24"]
  public_subnets  = ["10.0.101.0/24", "10.0.102.0/24"]

  enable_nat_gateway = true
  single_nat_gateway = true
  enable_dns_hostnames = true
}

# ALB (Application Load Balancer)
module "alb" {
  source  = "terraform-aws-modules/alb/aws"
  name    = "ha-alb"
  vpc_id  = module.vpc.vpc_id
  subnets = module.vpc.public_subnets

  enable_http2 = true

  listeners = [
    {
      port     = 80
      protocol = "HTTP"
      default_action = {
        type             = "fixed-response"
        fixed_response   = { content_type = "text/plain", message_body = "OK", status_code = "200" }
      }
    }
  ]
}

# ECS Cluster
resource "aws_ecs_cluster" "ha_cluster" {
  name = "ha-cluster"
}

# ECS Fargate Service (Sample Node.js App)
module "app" {
  source = "terraform-aws-modules/ecs/aws"

  name           = "node-app"
  cluster_name   = aws_ecs_cluster.ha_cluster.name
  container_definitions = jsonencode([{ 
    name      = "app"
    image     = "node:18-alpine"
    portMappings = [{ containerPort = 3000, hostPort = 3000 }]
    essential = true
  }])

  launch_type         = "FARGATE"
  desired_count       = 2
  cpu                 = 256
  memory              = 512

  subnet_ids          = module.vpc.private_subnets
  security_groups     = [module.vpc.default_security_group_id]
  assign_public_ip    = false

  load_balancer = {
    target_group_arn = module.alb.target_groups[0].arn
    container_name   = "app"
    container_port   = 3000
  }
}

# Route 53 Health Check & Multi-Region Failover (Optional)
resource "aws_route53_health_check" "app_check" {
  fqdn              = module.alb.dns_name
  port              = 80
  type              = "HTTP"
  resource_path     = "/"
  failure_threshold = 3
  request_interval  = 30
}

resource "aws_route53_record" "app_dns" {
  zone_id = var.route53_zone_id
  name    = "app.example.com"
  type    = "A"

  alias {
    name                   = module.alb.dns_name
    zone_id                = module.alb.zone_id
    evaluate_target_health = true
  }

  health_check_id = aws_route53_health_check.app_check.id
  set_identifier  = "primary"
  failover_routing_policy {
    type = "PRIMARY"
  }
}

# CloudWatch Monitoring & Alerting
resource "aws_cloudwatch_log_group" "app_logs" {
  name              = "/ecs/app"
  retention_in_days = 14
}

resource "aws_cloudwatch_metric_alarm" "cpu_high" {
  alarm_name          = "HighCPUUtilization"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = 2
  metric_name         = "CPUUtilization"
  namespace           = "AWS/ECS"
  period              = 60
  statistic           = "Average"
  threshold           = 80
  alarm_description   = "This alarm monitors high CPU usage on ECS service"
  dimensions = {
    ClusterName = aws_ecs_cluster.ha_cluster.name
    ServiceName = module.app.name
  }
  alarm_actions = [var.sns_topic_arn]
}

# CI/CD GitLab Pipeline (example snippet - to be stored in .gitlab-ci.yml)
# stages:
#   - build
#   - deploy

# build:
#   stage: build
#   script:
#     - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA .
#     - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

# deploy:
#   stage: deploy
#   script:
#     - terraform init
#     - terraform apply -auto-approve
